//
// Copyright Institute of Automotive Engineering
// of Technical University of Darmstadt 2020.
// Licensed under the EUPL-1.2-or-later
//
// This work covered by the EUPL can be used/merged and distributed
// in other works covered by GPL-2.0, GPL-3.0, LGPL, AGPL, CeCILL,
// OSL, EPL, MPL and other licences listed as compatible in the EUPL
// Appendix. This applies to the other (combined) work, while the
// original project stays covered by the EUPL without re-licensing.
//
// Alternatively, the contents of this file may be used under the
// terms of the Mozilla Public License, v. 2.0. If a copy of the MPL
// was not distributed with this file, you can obtain one at
// http://mozilla.org/MPL/2.0/.
//

#include "model/include/sequence.hpp"

@STRATEGY_INCLUDES@

namespace model {

    Sequence::Sequence(const Profile &profile, const Log &log, const Alert &alert) : Strategy(profile, log, alert) {
        @STRATEGY_INSTANCES@
        @CSV_OUTPUT_STRATEGY_INSTANCES@
        @PCD_OUTPUT_STRATEGY_INSTANCES@
        @BIN_OUTPUT_STRATEGY_INSTANCES@
        @ROS_OUTPUT_STRATEGY_INSTANCES@
    }

    void Sequence::apply(osi3::SensorData &data) {
        for (const auto &strategy : strategies) {
            strategy->apply(data);
        }
        if (csv_output_enabled) {
            if (!csv_output_strategies.empty()) {
                for (const auto &strategy : csv_output_strategies) {
                    strategy->apply(data);
                }
            } else {
                alert("FMU does not contain output strategies for output to .csv-files, but FMU parameter 'switch_for_csv_output' has been enabled!");
                alert("Set FMU parameter 'switch_for_csv_output' to false or change file csv_output_sequence.conf accordingly!");
            }
        }
        if (pcd_output_enabled) {
            if (!pcd_output_strategies.empty()) {
                for (const auto &strategy : pcd_output_strategies) {
                    strategy->apply(data);
                }
            } else {
                alert("FMU does not contain output strategies for output to .pcd-files, but FMU parameter 'switch_for_pcd_output' has been enabled!");
                alert("Set FMU parameter 'switch_for_pcd_output' to false or change file pcd_output_sequence.conf accordingly!");
            }
        }
        if (bin_output_enabled) {
            if (!bin_output_strategies.empty()) {
                for (const auto &strategy : bin_output_strategies) {
                    strategy->apply(data);
                }
            } else {
                alert("FMU does not contain output strategies for output to binary, but FMU parameter 'switch_for_bin_output' has been enabled!");
                alert("Set FMU parameter 'switch_for_bin_output' to false or change file bin_output_sequence.conf accordingly!");
            }
        }
        if (ros_output_enabled) {
            if (!ros_output_strategies.empty()) {
                for (const auto &strategy : ros_output_strategies) {
                    strategy->apply(data);
                }
            } else {
                alert("FMU does not contain output strategies for output to ROS, but FMU parameter 'switch_for_ros_output' has been enabled!");
                alert("Set FMU parameter 'switch_for_ros_output' to false or change file ros_output_sequence.conf accordingly!");
            }
        }
    }
    
    void Sequence::set_switch_for_csv_output(bool switch_for_csv_output) {
        csv_output_enabled = switch_for_csv_output;
    }
    
    void Sequence::set_switch_for_pcd_output(bool switch_for_pcd_output) {
        pcd_output_enabled = switch_for_pcd_output;
    }

    void Sequence::set_switch_for_bin_output(bool switch_for_bin_output) {
        bin_output_enabled = switch_for_bin_output;
    }
    
    void Sequence::set_switch_for_ros_output(bool switch_for_ros_output) {
        ros_output_enabled = switch_for_ros_output;
    }

}
