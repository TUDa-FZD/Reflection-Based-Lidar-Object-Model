//
// Copyright Institute of Automotive Engineering
// of Technical University of Darmstadt 2020.
// Licensed under the EUPL-1.2-or-later
//
// This work covered by the EUPL can be used/merged and distributed
// in other works covered by GPL-2.0, GPL-3.0, LGPL, AGPL, CeCILL,
// OSL, EPL, MPL and other licences listed as compatible in the EUPL
// Appendix. This applies to the other (combined) work, while the
// original project stays covered by the EUPL without re-licensing.
//
// Alternatively, the contents of this file may be used under the
// terms of the Mozilla Public License, v. 2.0. If a copy of the MPL
// was not distributed with this file, you can obtain one at
// http://mozilla.org/MPL/2.0/.
//

#ifndef _USE_MATH_DEFINES
#define _USE_MATH_DEFINES
#endif

#ifdef _WIN32
#include <math.h>
#else
#include <cmath>
#endif

namespace model::profile::Ibeo_LUX_2010 {

    Profile generate() {
        Profile Ibeo_LUX_2010;
        int no_of_beams_vertical = 4;
        int no_of_beams_horizontal = 241;
        double min_range = 0.3;
        double max_range = 400.0;
        double horizontal_angle_min_rad = -60.25 / 180.0 * M_PI;
        std::vector<double> beam_layer_angles_rad = {1.2 / 180.0 * M_PI, 0.4 / 180.0 * M_PI, -0.4 / 180.0 * M_PI, -1.2 / 180.0 * M_PI};
        auto beam_width_rad  = 0.5 / 180.0 * M_PI;
        auto beam_height_rad = 0.8 / 180.0 * M_PI;
        int rays_per_beam_horizontal = 21;
        int rays_per_beam_vertical = 33;
        auto no_of_rays_horizontal = no_of_beams_horizontal * rays_per_beam_horizontal;
        auto no_of_rays_vertical = no_of_beams_vertical * rays_per_beam_vertical;

        Ibeo_LUX_2010.sensor_view_configuration.mutable_update_cycle_time()->set_seconds(0);
        Ibeo_LUX_2010.sensor_view_configuration.mutable_update_cycle_time()->set_nanos(80000000);
        Ibeo_LUX_2010.sensor_view_configuration.set_range(max_range);
        Ibeo_LUX_2010.sensor_view_configuration.set_field_of_view_horizontal(180.0 / 180.0 * M_PI);
        Ibeo_LUX_2010.sensor_view_configuration.set_field_of_view_vertical(170.0 / 180.0 * M_PI);
        Ibeo_LUX_2010.sensor_view_configuration.mutable_mounting_position()->mutable_position()->set_x(0.0);
        Ibeo_LUX_2010.sensor_view_configuration.mutable_mounting_position()->mutable_position()->set_y(0.0);
        Ibeo_LUX_2010.sensor_view_configuration.mutable_mounting_position()->mutable_position()->set_z(0.0);
        Ibeo_LUX_2010.sensor_view_configuration.mutable_mounting_position()->mutable_orientation()->set_roll(0.0 / 180.0 * M_PI);
        Ibeo_LUX_2010.sensor_view_configuration.mutable_mounting_position()->mutable_orientation()->set_pitch(0.0 / 180.0 * M_PI);
        Ibeo_LUX_2010.sensor_view_configuration.mutable_mounting_position()->mutable_orientation()->set_yaw(0.0 / 180.0 * M_PI);

        auto lidar_sensor_view_configuration = Ibeo_LUX_2010.sensor_view_configuration.add_lidar_sensor_view_configuration();
        lidar_sensor_view_configuration->set_field_of_view_horizontal(2.0 * std::abs(horizontal_angle_min_rad));
        lidar_sensor_view_configuration->set_field_of_view_vertical(2.0 * (std::abs(beam_layer_angles_rad[0] + beam_height_rad / 2.0)));
        lidar_sensor_view_configuration->set_number_of_rays_horizontal(no_of_rays_horizontal);
        lidar_sensor_view_configuration->set_number_of_rays_vertical(no_of_rays_vertical);
        lidar_sensor_view_configuration->mutable_mounting_position()->mutable_position()->set_x(4.2);
        lidar_sensor_view_configuration->mutable_mounting_position()->mutable_position()->set_y(0.0);
        lidar_sensor_view_configuration->mutable_mounting_position()->mutable_position()->set_z(0.0);
        lidar_sensor_view_configuration->mutable_mounting_position()->mutable_orientation()->set_roll(0.0 / 180.0 * M_PI);
        lidar_sensor_view_configuration->mutable_mounting_position()->mutable_orientation()->set_pitch(-0.5 / 180.0 * M_PI);
        lidar_sensor_view_configuration->mutable_mounting_position()->mutable_orientation()->set_yaw(-0.25 / 180.0 * M_PI);

        /// The following parameters can be defined for multiple sensors.
        Ibeo_LUX_2010.min_range = {min_range};